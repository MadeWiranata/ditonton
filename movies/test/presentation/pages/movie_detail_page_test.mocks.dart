// Mocks generated by Mockito 5.0.16 from annotations
// in movie/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: unnecessary_overrides

import 'dart:async' as _i5;
import 'package:movies/domain/entities/movie_detail.dart' as _i19;
import 'package:bloc/bloc.dart' as _i11;
import 'package:core/domain/usecases/movies/get_watchlist_movies.dart' as _i6;
import 'package:core/domain/usecases/movies/get_watchlist_status.dart' as _i7;
import 'package:core/domain/usecases/movies/remove_watchlist.dart' as _i9;
import 'package:core/domain/usecases/movies/save_watchlist.dart' as _i8;
import 'package:core/presentation/cubit/movies/watchlist_cubit.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/domain/usecase/get_movie_detail.dart' as _i2;
import 'package:movies/domain/usecase/get_movie_recommendations.dart' as _i3;
import 'package:movies/presentation/cubit/movie_detail_cubit.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeGetMovieRecommendations_1 extends _i1.Fake
    implements _i3.GetMovieRecommendations {}

class _FakeMovieDetailState_2 extends _i1.Fake implements _i4.MovieDetailState {
}

class _FakeStreamSubscription_3<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

class _FakeGetWatchlist_4 extends _i1.Fake implements _i6.GetWatchlistMovies {}

class _FakeGetWatchListStatus_5 extends _i1.Fake
    implements _i7.GetWatchListStatus {}

class _FakeSaveWatchlist_6 extends _i1.Fake implements _i8.SaveWatchlist {}

class _FakeRemoveWatchlist_7 extends _i1.Fake implements _i9.RemoveWatchlist {}

class _FakeWatchlistState_8 extends _i1.Fake implements _i10.WatchlistState {}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i4.MovieDetailCubit {
  MockMovieDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_1())
          as _i3.GetMovieRecommendations);
  @override
  _i4.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_2()) as _i4.MovieDetailState);
  @override
  _i5.Stream<_i4.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.MovieDetailState>.empty())
          as _i5.Stream<_i4.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchMovieDetail(int? id) =>
      super.noSuchMethod(Invocation.method(#fetchMovieDetail, [id]),
          returnValueForMissingStub: null);
  @override
  _i5.StreamSubscription<_i4.MovieDetailState> listen(
          void Function(_i4.MovieDetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_3<_i4.MovieDetailState>())
          as _i5.StreamSubscription<_i4.MovieDetailState>);
  @override
  void emit(_i4.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i11.Change<_i4.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WatchlistCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistCubit extends _i1.Mock implements _i10.WatchlistCubit {
  MockWatchlistCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetWatchlistMovies get watchlist =>
      (super.noSuchMethod(Invocation.getter(#watchlist),
          returnValue: _FakeGetWatchlist_4()) as _i6.GetWatchlistMovies);
  @override
  _i7.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
          returnValue: _FakeGetWatchListStatus_5()) as _i7.GetWatchListStatus);
  @override
  _i8.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_6()) as _i8.SaveWatchlist);
  @override
  _i9.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_7()) as _i9.RemoveWatchlist);
  @override
  _i10.WatchlistState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeWatchlistState_8()) as _i10.WatchlistState);
  @override
  _i5.Stream<_i10.WatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.WatchlistState>.empty())
          as _i5.Stream<_i10.WatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void loadWatchlistStatus(int? id) =>
      super.noSuchMethod(Invocation.method(#loadWatchlistStatus, [id]),
          returnValueForMissingStub: null);
  @override
  void fetchWatchlist() =>
      super.noSuchMethod(Invocation.method(#fetchWatchlist, []),
          returnValueForMissingStub: null);
  @override
  void addWatchlist(_i19.MovieDetail? movie) =>
      super.noSuchMethod(Invocation.method(#addWatchlist, [movie]),
          returnValueForMissingStub: null);
  @override
  void deleteWatchlist(_i19.MovieDetail? id) =>
      super.noSuchMethod(Invocation.method(#deleteWatchlist, [id]),
          returnValueForMissingStub: null);
  @override
  _i5.StreamSubscription<_i10.WatchlistState> listen(
          void Function(_i10.WatchlistState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_3<_i10.WatchlistState>())
          as _i5.StreamSubscription<_i10.WatchlistState>);
  @override
  void emit(_i10.WatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i11.Change<_i10.WatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}
